<?php
/**
 * @file
 * Implements the search auto-complete functions to the ting search field by
 * using open search.
 */

/**
 * Implements hook_menu().
 */
function ting_search_autocomplete_menu() {
  $items = array();

  $items['ting/autocomplete'] = array(
    'title' => 'Ting search autocomplete',
    'description' => 'Returns a list of suggestions to use for autocompletion',
    'access arguments' => array('search content'),
    'page callback' => 'ting_search_autocomplete_callback',
    'file' => 'includes/ting_search_autocomplete.ajax.inc',
    'type' => MENU_CALLBACK,
  );

  $items['admin/config/ting/autocomplete'] = array(
    'title' => 'Ting search autocomplete settings',
    'description' => 'Settings for Ting search autocomplete',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ting_search_autocomplete_admin'),
    'access arguments' => array('administer search'),
    'file' => 'includes/ting_search_autocomplete.admin.inc',
  );

   $items['ting/parsesuggestion'] = array(
    'title' => 'Parse suggestion data',
    'description' => t('Get data from well'),
    'page callback' => 'ting_search_autocomplete_suggestion_data',
    'access arguments' => array('administer ting settings'),
  );
  return $items;
}

/**
 * Implements hook_flush_caches().
 */
function ting_search_autocomplete_flush_caches() {
  return array('cache_ting_search_autocomplete');
}

/**
 * Implements hook_form_alter().
 *
 * Adds CSS and JS to the ting search form.
 */
function ting_search_autocomplete_form_search_block_form_alter(&$form, &$form_state) {
  $form['search_block_form']['#autocomplete_path'] = 'ting/autocomplete';

  // Add class to make sure that the form is auto-submitted.
  $form['search_block_form']['#attributes']['class'] = array('auto-submit');

  // Modify the core auto-complete behaviour to search on enter. It has a high
  // weight to ensure that it's include after core auto complete script.
  drupal_add_js(drupal_get_path('module', 'ting_search_autocomplete') . '/js/ting_search_autocomplete.js', array('weight' => 1000));
}


/**
 * Get settings, and merge with defaults.
 * @return array
 */
function ting_search_autocomplete_settings() {
  $settings = array();

  $base_settings['index'] = NULL;
  $base_settings['facetIndex'] = NULL;
  $base_settings['filterQuery'] = NULL;
  $base_settings['sort'] = 'count';

  $base_settings['agency']  = variable_get('ting_agency', NULL);
  $base_settings['profile'] = variable_get('ting_search_profile', NULL);
  $base_settings['maxSuggestions'] = 10;
  $base_settings['maxTime'] = 2000;

  $base_settings['highlight'] = NULL;
  $base_settings['highlight.pre'] = NULL;
  $base_settings['highlight.post'] = NULL;
  $base_settings['minimumString'] = 3;

  $defaults = variable_get('ting_search_autocomplete_settings', array());

  $settings = array_merge($base_settings, $defaults);
  
  return $settings;
}

function ting_search_autocomplete_suggestion_data($file) {
  //print ("Parsing 2");

  $csv = array_map('str_getcsv', file($file));
  $suggest_data = array();
  foreach ($csv as $line) {
    if ((strpos($line[1], '"') == false) && (strpos($line[1], '=') == false)) {
      $suggest_data[] = array(
          'term' => strtolower($line[1]),
          'hits' => $line[3]
      );
    }
  }
  file_put_contents("/var/www/drupalvm/drupal/debug/suggest3.txt", print_r($suggest_data, TRUE), FILE_APPEND);
  file_put_contents("/var/www/drupalvm/drupal/debug/suggest2.txt", print_r($csv, TRUE), FILE_APPEND);
  $suggest = ting_search_autocomplete_suggest_get_keys($suggest_data);

  $suggest_result = array(); 
  foreach ($suggest as $key => $char) {
    uasort($char, 'ting_search_autocomplete_sort_suggest_count');
    $top_results = array_slice($char, 0, 10);
    $terms = array();
    foreach ($top_results as $top_result) {
      $terms[] = $top_result['term'];
    }
    $suggest_result[$key] = $terms;
    file_put_contents("/var/www/drupalvm/drupal/debug/suggest7.txt", print_r($top_results, TRUE), FILE_APPEND);
  }
  file_put_contents("/var/www/drupalvm/drupal/debug/suggest6.txt", print_r($suggest_result, TRUE), FILE_APPEND);
  variable_set('ting_search_autocomplete_suggest_data', $suggest_result);

}

function ting_search_autocomplete_suggest_get_keys($suggest_data) {
  $suggest = array();
  foreach ($suggest_data as $search_term) {
    $char = substr($search_term['term'], 0, 1);
    if (!array_key_exists($char, $suggest)) {
      $suggest[$char] = array();
    }
    $suggest[$char][] = $search_term;
    $char = substr($search_term['term'], 0, 2);
    if (!array_key_exists($char, $suggest)) {
      $suggest[$char] = array();
    }
    $suggest[$char][] = $search_term;
    $char = substr($search_term['term'], 0, 3);
    if (!array_key_exists($char, $suggest)) {
      $suggest[$char] = array();
    }
    $suggest[$char][] = $search_term;
  }
  return $suggest;
}

function ting_search_autocomplete_sort_suggest_count($a, $b) {
  if (!isset($a['hits'] )) {
    return 1;
  }
  if (!isset($b['hits'] )) {
    return -1;
  }
  if ($a['hits']  == $b['hits'] ) {
    return 0;
  }
  return ($a['hits']  < $b['hits'] ) ? 1 : -1;
}
